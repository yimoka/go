// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.32.0
// source: config/config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Server      *Server                `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	Data        *Data                  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Trace       *Trace                 `protobuf:"bytes,4,opt,name=trace,proto3" json:"trace,omitempty"`
	Metrics     *Metrics               `protobuf:"bytes,15,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Mq          *MQ                    `protobuf:"bytes,5,opt,name=mq,proto3" json:"mq,omitempty"`
	Upload      *Upload                `protobuf:"bytes,6,opt,name=upload,proto3" json:"upload,omitempty"`
	Services    map[string]string      `protobuf:"bytes,7,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 连接其他服务
	CallbackURL string                 `protobuf:"bytes,8,opt,name=callbackURL,proto3" json:"callbackURL,omitempty"`                                                                     // 回调地址 用于与第三方如微信支付宝等 接收回调
	Logger      *Logger                `protobuf:"bytes,9,opt,name=logger,proto3" json:"logger,omitempty"`
	// 多语言配置
	Languages map[string]*Lang `protobuf:"bytes,10,rep,name=languages,proto3" json:"languages,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 公共语言配置 用于替换公共的语言处理器
	CommonLangs map[string]*Lang `protobuf:"bytes,11,rep,name=commonLangs,proto3" json:"commonLangs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Workflow    *Workflow        `protobuf:"bytes,12,opt,name=workflow,proto3" json:"workflow,omitempty"`
	// 管理认证配置
	ManageAuth *Auth `protobuf:"bytes,13,opt,name=manageAuth,proto3" json:"manageAuth,omitempty"`
	// 门户/用户认证配置
	PortalAuth    *Auth            `protobuf:"bytes,14,opt,name=portalAuth,proto3" json:"portalAuth,omitempty"`
	Extra         *structpb.Struct `protobuf:"bytes,20,opt,name=extra,proto3" json:"extra,omitempty"` // 扩展配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_config_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Config) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Config) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Config) GetTrace() *Trace {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *Config) GetMetrics() *Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Config) GetMq() *MQ {
	if x != nil {
		return x.Mq
	}
	return nil
}

func (x *Config) GetUpload() *Upload {
	if x != nil {
		return x.Upload
	}
	return nil
}

func (x *Config) GetServices() map[string]string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *Config) GetCallbackURL() string {
	if x != nil {
		return x.CallbackURL
	}
	return ""
}

func (x *Config) GetLogger() *Logger {
	if x != nil {
		return x.Logger
	}
	return nil
}

func (x *Config) GetLanguages() map[string]*Lang {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *Config) GetCommonLangs() map[string]*Lang {
	if x != nil {
		return x.CommonLangs
	}
	return nil
}

func (x *Config) GetWorkflow() *Workflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

func (x *Config) GetManageAuth() *Auth {
	if x != nil {
		return x.ManageAuth
	}
	return nil
}

func (x *Config) GetPortalAuth() *Auth {
	if x != nil {
		return x.PortalAuth
	}
	return nil
}

func (x *Config) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

// 服务配置
type Server struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Id      string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Appid   string                 `protobuf:"bytes,4,opt,name=appid,proto3" json:"appid,omitempty"`
	// grpc 服务 默认用于微服务内部通信
	Grpc *ServerItem `protobuf:"bytes,5,opt,name=grpc,proto3" json:"grpc,omitempty"`
	// 管理后台 API 服务
	HttpManage *ServerItem `protobuf:"bytes,6,opt,name=httpManage,proto3" json:"httpManage,omitempty"`
	// 门户/用户 API 服务
	// portal 服务 默认用于前端(通常指的是 C 端用户，如 app、小程序之类的调用) API
	// 如果有独立的 portal 服务，建议不开启，
	// 如果是单体服务，建议开启，用于前端调用
	// 如果是微服务，又相对比较独立，portal 层只是单纯的转发，可配合网关开启使用。
	HttpPortal    *ServerItem `protobuf:"bytes,7,opt,name=httpPortal,proto3" json:"httpPortal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server) Reset() {
	*x = Server{}
	mi := &file_config_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *Server) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Server) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Server) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Server) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *Server) GetGrpc() *ServerItem {
	if x != nil {
		return x.Grpc
	}
	return nil
}

func (x *Server) GetHttpManage() *ServerItem {
	if x != nil {
		return x.HttpManage
	}
	return nil
}

func (x *Server) GetHttpPortal() *ServerItem {
	if x != nil {
		return x.HttpPortal
	}
	return nil
}

// 服务配置项 当不配置 addr 时，默认不开启服务
type ServerItem struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Network         string                 `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr            string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Timeout         *durationpb.Duration   `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	IsLog           bool                   `protobuf:"varint,4,opt,name=isLog,proto3" json:"isLog,omitempty"`
	IsTrace         bool                   `protobuf:"varint,5,opt,name=isTrace,proto3" json:"isTrace,omitempty"`
	IsMetrics       bool                   `protobuf:"varint,13,opt,name=isMetrics,proto3" json:"isMetrics,omitempty"`
	AuthServer      string                 `protobuf:"bytes,6,opt,name=authServer,proto3" json:"authServer,omitempty"`
	AccessServer    string                 `protobuf:"bytes,7,opt,name=accessServer,proto3" json:"accessServer,omitempty"`
	AuthWhiteList   []string               `protobuf:"bytes,8,rep,name=authWhiteList,proto3" json:"authWhiteList,omitempty"`
	AccessWhiteList []string               `protobuf:"bytes,9,rep,name=accessWhiteList,proto3" json:"accessWhiteList,omitempty"`
	AccessPrefix    string                 `protobuf:"bytes,10,opt,name=accessPrefix,proto3" json:"accessPrefix,omitempty"`
	// 用于区分不同服务的前缀 httpManage httpPortal grpc
	TracePrefix string `protobuf:"bytes,11,opt,name=tracePrefix,proto3" json:"tracePrefix,omitempty"`
	// 用于区分不同服务的后缀 httpManage httpPortal grpc
	TraceSuffix   string `protobuf:"bytes,12,opt,name=traceSuffix,proto3" json:"traceSuffix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerItem) Reset() {
	*x = ServerItem{}
	mi := &file_config_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerItem) ProtoMessage() {}

func (x *ServerItem) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerItem.ProtoReflect.Descriptor instead.
func (*ServerItem) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *ServerItem) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ServerItem) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ServerItem) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ServerItem) GetIsLog() bool {
	if x != nil {
		return x.IsLog
	}
	return false
}

func (x *ServerItem) GetIsTrace() bool {
	if x != nil {
		return x.IsTrace
	}
	return false
}

func (x *ServerItem) GetIsMetrics() bool {
	if x != nil {
		return x.IsMetrics
	}
	return false
}

func (x *ServerItem) GetAuthServer() string {
	if x != nil {
		return x.AuthServer
	}
	return ""
}

func (x *ServerItem) GetAccessServer() string {
	if x != nil {
		return x.AccessServer
	}
	return ""
}

func (x *ServerItem) GetAuthWhiteList() []string {
	if x != nil {
		return x.AuthWhiteList
	}
	return nil
}

func (x *ServerItem) GetAccessWhiteList() []string {
	if x != nil {
		return x.AccessWhiteList
	}
	return nil
}

func (x *ServerItem) GetAccessPrefix() string {
	if x != nil {
		return x.AccessPrefix
	}
	return ""
}

func (x *ServerItem) GetTracePrefix() string {
	if x != nil {
		return x.TracePrefix
	}
	return ""
}

func (x *ServerItem) GetTraceSuffix() string {
	if x != nil {
		return x.TraceSuffix
	}
	return ""
}

// 数据配置
type Data struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Database *Database              `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Redis    *Redis                 `protobuf:"bytes,2,opt,name=redis,proto3" json:"redis,omitempty"`
	Cache    *Cache                 `protobuf:"bytes,3,opt,name=cache,proto3" json:"cache,omitempty"`
	Search   *Search                `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	// 密钥，用于落库加密
	// 默认密钥
	Secret string `protobuf:"bytes,5,opt,name=secret,proto3" json:"secret,omitempty"`
	// 自定义密钥，不同库或者表可以使用不同的密钥
	Secrets map[string]string `protobuf:"bytes,6,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 不创建表结构 通常生产环境账号只给读写数据权限，结果更改走审计
	NoCreateSchema bool `protobuf:"varint,7,opt,name=noCreateSchema,proto3" json:"noCreateSchema,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_config_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *Data) GetDatabase() *Database {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *Data) GetRedis() *Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Data) GetCache() *Cache {
	if x != nil {
		return x.Cache
	}
	return nil
}

func (x *Data) GetSearch() *Search {
	if x != nil {
		return x.Search
	}
	return nil
}

func (x *Data) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *Data) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *Data) GetNoCreateSchema() bool {
	if x != nil {
		return x.NoCreateSchema
	}
	return false
}

type Database struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Driver        string                 `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Source        string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	IsTrace       bool                   `protobuf:"varint,3,opt,name=isTrace,proto3" json:"isTrace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Database) Reset() {
	*x = Database{}
	mi := &file_config_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *Database) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *Database) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Database) GetIsTrace() bool {
	if x != nil {
		return x.IsTrace
	}
	return false
}

type Redis struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Addr         string                 `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Password     string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Db           int32                  `protobuf:"varint,3,opt,name=db,proto3" json:"db,omitempty"`
	DialTimeout  *durationpb.Duration   `protobuf:"bytes,4,opt,name=dial_timeout,json=dialTimeout,proto3" json:"dial_timeout,omitempty"`
	ReadTimeout  *durationpb.Duration   `protobuf:"bytes,5,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`
	WriteTimeout *durationpb.Duration   `protobuf:"bytes,6,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`
	IsTrace      bool                   `protobuf:"varint,7,opt,name=isTrace,proto3" json:"isTrace,omitempty"`
	// 单机模式
	IsSingle      bool     `protobuf:"varint,8,opt,name=isSingle,proto3" json:"isSingle,omitempty"`
	Addrs         []string `protobuf:"bytes,9,rep,name=addrs,proto3" json:"addrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Redis) Reset() {
	*x = Redis{}
	mi := &file_config_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redis) ProtoMessage() {}

func (x *Redis) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redis.ProtoReflect.Descriptor instead.
func (*Redis) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *Redis) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Redis) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *Redis) GetDialTimeout() *durationpb.Duration {
	if x != nil {
		return x.DialTimeout
	}
	return nil
}

func (x *Redis) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *Redis) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *Redis) GetIsTrace() bool {
	if x != nil {
		return x.IsTrace
	}
	return false
}

func (x *Redis) GetIsSingle() bool {
	if x != nil {
		return x.IsSingle
	}
	return false
}

func (x *Redis) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type Cache struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Prefix     string                 `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Expiration int32                  `protobuf:"varint,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// 默认 redis
	Driver        string `protobuf:"bytes,3,opt,name=driver,proto3" json:"driver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cache) Reset() {
	*x = Cache{}
	mi := &file_config_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cache) ProtoMessage() {}

func (x *Cache) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cache.ProtoReflect.Descriptor instead.
func (*Cache) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{6}
}

func (x *Cache) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Cache) GetExpiration() int32 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *Cache) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

type Search struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          string                 `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Addrs         []string               `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"` // es 集群
	User          string                 `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Password      string                 `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Search) Reset() {
	*x = Search{}
	mi := &file_config_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Search) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Search) ProtoMessage() {}

func (x *Search) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Search.ProtoReflect.Descriptor instead.
func (*Search) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{7}
}

func (x *Search) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Search) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *Search) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Search) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type MQ struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pulsar        *Pulsar                `protobuf:"bytes,1,opt,name=pulsar,proto3" json:"pulsar,omitempty"`
	Consumers     map[string]*Consumer   `protobuf:"bytes,2,rep,name=consumers,proto3" json:"consumers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Producers     map[string]*Producer   `protobuf:"bytes,3,rep,name=producers,proto3" json:"producers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MQ) Reset() {
	*x = MQ{}
	mi := &file_config_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MQ) ProtoMessage() {}

func (x *MQ) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MQ.ProtoReflect.Descriptor instead.
func (*MQ) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{8}
}

func (x *MQ) GetPulsar() *Pulsar {
	if x != nil {
		return x.Pulsar
	}
	return nil
}

func (x *MQ) GetConsumers() map[string]*Consumer {
	if x != nil {
		return x.Consumers
	}
	return nil
}

func (x *MQ) GetProducers() map[string]*Producer {
	if x != nil {
		return x.Producers
	}
	return nil
}

type Pulsar struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Url               string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Authentication    string                 `protobuf:"bytes,2,opt,name=authentication,proto3" json:"authentication,omitempty"`
	OperationTimeout  int32                  `protobuf:"varint,3,opt,name=operationTimeout,proto3" json:"operationTimeout,omitempty"`
	ConnectionTimeout int32                  `protobuf:"varint,4,opt,name=connectionTimeout,proto3" json:"connectionTimeout,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Pulsar) Reset() {
	*x = Pulsar{}
	mi := &file_config_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pulsar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pulsar) ProtoMessage() {}

func (x *Pulsar) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pulsar.ProtoReflect.Descriptor instead.
func (*Pulsar) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{9}
}

func (x *Pulsar) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Pulsar) GetAuthentication() string {
	if x != nil {
		return x.Authentication
	}
	return ""
}

func (x *Pulsar) GetOperationTimeout() int32 {
	if x != nil {
		return x.OperationTimeout
	}
	return 0
}

func (x *Pulsar) GetConnectionTimeout() int32 {
	if x != nil {
		return x.ConnectionTimeout
	}
	return 0
}

type Consumer struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ChannelNum       int32                  `protobuf:"varint,1,opt,name=channelNum,proto3" json:"channelNum,omitempty"`
	ReconsumeDelay   int64                  `protobuf:"varint,2,opt,name=reconsumeDelay,proto3" json:"reconsumeDelay,omitempty"`
	Topic            string                 `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Topics           []string               `protobuf:"bytes,4,rep,name=topics,proto3" json:"topics,omitempty"`
	SubscriptionName string                 `protobuf:"bytes,5,opt,name=subscriptionName,proto3" json:"subscriptionName,omitempty"`
	Type             string                 `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Dlq              *Consumer_DLQ          `protobuf:"bytes,7,opt,name=dlq,proto3" json:"dlq,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Consumer) Reset() {
	*x = Consumer{}
	mi := &file_config_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Consumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consumer) ProtoMessage() {}

func (x *Consumer) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consumer.ProtoReflect.Descriptor instead.
func (*Consumer) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{10}
}

func (x *Consumer) GetChannelNum() int32 {
	if x != nil {
		return x.ChannelNum
	}
	return 0
}

func (x *Consumer) GetReconsumeDelay() int64 {
	if x != nil {
		return x.ReconsumeDelay
	}
	return 0
}

func (x *Consumer) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Consumer) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Consumer) GetSubscriptionName() string {
	if x != nil {
		return x.SubscriptionName
	}
	return ""
}

func (x *Consumer) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Consumer) GetDlq() *Consumer_DLQ {
	if x != nil {
		return x.Dlq
	}
	return nil
}

type Producer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Producer) Reset() {
	*x = Producer{}
	mi := &file_config_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Producer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Producer) ProtoMessage() {}

func (x *Producer) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Producer.ProtoReflect.Descriptor instead.
func (*Producer) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{11}
}

func (x *Producer) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Producer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 日志配置
type Logger struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 服务商
	Provider     string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	TopicID      string `protobuf:"bytes,2,opt,name=topicID,proto3" json:"topicID,omitempty"`
	AccessKey    string `protobuf:"bytes,3,opt,name=accessKey,proto3" json:"accessKey,omitempty"`
	AccessSecret string `protobuf:"bytes,4,opt,name=accessSecret,proto3" json:"accessSecret,omitempty"`
	Endpoint     string `protobuf:"bytes,5,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// 认证配置
	Token    string `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	Username string `protobuf:"bytes,7,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,8,opt,name=password,proto3" json:"password,omitempty"`
	// 是否同时输出到标准输出
	AlsoStd bool `protobuf:"varint,9,opt,name=alsoStd,proto3" json:"alsoStd,omitempty"`
	// 日志过滤的级别 字符串
	FilterLevel string `protobuf:"bytes,10,opt,name=filterLevel,proto3" json:"filterLevel,omitempty"`
	// 日志过滤的 keys
	FilterKeys []string `protobuf:"bytes,11,rep,name=filterKeys,proto3" json:"filterKeys,omitempty"`
	// 日志过滤的 values
	FilterValues []string `protobuf:"bytes,12,rep,name=filterValues,proto3" json:"filterValues,omitempty"`
	// 按正则屏蔽/脱敏 不是过滤
	SensitiveRegex []string `protobuf:"bytes,13,rep,name=sensitiveRegex,proto3" json:"sensitiveRegex,omitempty"`
	// otel 时有些需要配置 headers
	Headers map[string]string `protobuf:"bytes,14,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 是否使用 insecure 连接
	Insecure      *bool `protobuf:"varint,15,opt,name=insecure,proto3,oneof" json:"insecure,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Logger) Reset() {
	*x = Logger{}
	mi := &file_config_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logger) ProtoMessage() {}

func (x *Logger) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logger.ProtoReflect.Descriptor instead.
func (*Logger) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{12}
}

func (x *Logger) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Logger) GetTopicID() string {
	if x != nil {
		return x.TopicID
	}
	return ""
}

func (x *Logger) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *Logger) GetAccessSecret() string {
	if x != nil {
		return x.AccessSecret
	}
	return ""
}

func (x *Logger) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Logger) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Logger) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Logger) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Logger) GetAlsoStd() bool {
	if x != nil {
		return x.AlsoStd
	}
	return false
}

func (x *Logger) GetFilterLevel() string {
	if x != nil {
		return x.FilterLevel
	}
	return ""
}

func (x *Logger) GetFilterKeys() []string {
	if x != nil {
		return x.FilterKeys
	}
	return nil
}

func (x *Logger) GetFilterValues() []string {
	if x != nil {
		return x.FilterValues
	}
	return nil
}

func (x *Logger) GetSensitiveRegex() []string {
	if x != nil {
		return x.SensitiveRegex
	}
	return nil
}

func (x *Logger) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Logger) GetInsecure() bool {
	if x != nil && x.Insecure != nil {
		return *x.Insecure
	}
	return false
}

type Trace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	SamplingRate  float32                `protobuf:"fixed32,2,opt,name=samplingRate,proto3" json:"samplingRate,omitempty"`
	Service       string                 `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	Env           string                 `protobuf:"bytes,4,opt,name=env,proto3" json:"env,omitempty"`
	Auth          *TraceAuth             `protobuf:"bytes,5,opt,name=auth,proto3" json:"auth,omitempty"`
	Insecure      *bool                  `protobuf:"varint,6,opt,name=insecure,proto3,oneof" json:"insecure,omitempty"`
	Headers       map[string]string      `protobuf:"bytes,7,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trace) Reset() {
	*x = Trace{}
	mi := &file_config_config_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{13}
}

func (x *Trace) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Trace) GetSamplingRate() float32 {
	if x != nil {
		return x.SamplingRate
	}
	return 0
}

func (x *Trace) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *Trace) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *Trace) GetAuth() *TraceAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *Trace) GetInsecure() bool {
	if x != nil && x.Insecure != nil {
		return *x.Insecure
	}
	return false
}

func (x *Trace) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TraceAuth struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceAuth) Reset() {
	*x = TraceAuth{}
	mi := &file_config_config_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceAuth) ProtoMessage() {}

func (x *TraceAuth) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceAuth.ProtoReflect.Descriptor instead.
func (*TraceAuth) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{14}
}

func (x *TraceAuth) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TraceAuth) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TraceAuth) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Metrics struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Endpoint string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Service  string                 `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// 环境标识
	Env string `protobuf:"bytes,3,opt,name=env,proto3" json:"env,omitempty"`
	// 命名空间
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 子系统
	Subsystem string `protobuf:"bytes,5,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
	// 自定义标签
	Labels   map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Insecure *bool             `protobuf:"varint,7,opt,name=insecure,proto3,oneof" json:"insecure,omitempty"`
	Headers  map[string]string `protobuf:"bytes,8,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 超时时间 秒
	Timeout int32 `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// 上报间隔 秒
	Interval      int32 `protobuf:"varint,10,opt,name=interval,proto3" json:"interval,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metrics) Reset() {
	*x = Metrics{}
	mi := &file_config_config_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metrics) ProtoMessage() {}

func (x *Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metrics.ProtoReflect.Descriptor instead.
func (*Metrics) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{15}
}

func (x *Metrics) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Metrics) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *Metrics) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *Metrics) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Metrics) GetSubsystem() string {
	if x != nil {
		return x.Subsystem
	}
	return ""
}

func (x *Metrics) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Metrics) GetInsecure() bool {
	if x != nil && x.Insecure != nil {
		return *x.Insecure
	}
	return false
}

func (x *Metrics) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Metrics) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Metrics) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type Upload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	SecretID      string                 `protobuf:"bytes,2,opt,name=secretID,proto3" json:"secretID,omitempty"`
	SecretKey     string                 `protobuf:"bytes,3,opt,name=secretKey,proto3" json:"secretKey,omitempty"`
	Cdn           string                 `protobuf:"bytes,4,opt,name=cdn,proto3" json:"cdn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Upload) Reset() {
	*x = Upload{}
	mi := &file_config_config_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Upload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Upload) ProtoMessage() {}

func (x *Upload) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Upload.ProtoReflect.Descriptor instead.
func (*Upload) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{16}
}

func (x *Upload) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Upload) GetSecretID() string {
	if x != nil {
		return x.SecretID
	}
	return ""
}

func (x *Upload) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *Upload) GetCdn() string {
	if x != nil {
		return x.Cdn
	}
	return ""
}

// 多语言内容配置
type Lang struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Messages      []*LangMessage         `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Dict          map[string]*DictData   `protobuf:"bytes,2,rep,name=dict,proto3" json:"dict,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Lang) Reset() {
	*x = Lang{}
	mi := &file_config_config_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Lang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lang) ProtoMessage() {}

func (x *Lang) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lang.ProtoReflect.Descriptor instead.
func (*Lang) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{17}
}

func (x *Lang) GetMessages() []*LangMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *Lang) GetDict() map[string]*DictData {
	if x != nil {
		return x.Dict
	}
	return nil
}

type LangMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hash          string                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	LeftDelim     string                 `protobuf:"bytes,4,opt,name=leftDelim,proto3" json:"leftDelim,omitempty"`
	RightDelim    string                 `protobuf:"bytes,5,opt,name=rightDelim,proto3" json:"rightDelim,omitempty"`
	Zero          string                 `protobuf:"bytes,6,opt,name=zero,proto3" json:"zero,omitempty"`
	One           string                 `protobuf:"bytes,7,opt,name=one,proto3" json:"one,omitempty"`
	Two           string                 `protobuf:"bytes,8,opt,name=two,proto3" json:"two,omitempty"`
	Few           string                 `protobuf:"bytes,9,opt,name=few,proto3" json:"few,omitempty"`
	Many          string                 `protobuf:"bytes,10,opt,name=many,proto3" json:"many,omitempty"`
	Other         string                 `protobuf:"bytes,11,opt,name=other,proto3" json:"other,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LangMessage) Reset() {
	*x = LangMessage{}
	mi := &file_config_config_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LangMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LangMessage) ProtoMessage() {}

func (x *LangMessage) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LangMessage.ProtoReflect.Descriptor instead.
func (*LangMessage) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{18}
}

func (x *LangMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LangMessage) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *LangMessage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LangMessage) GetLeftDelim() string {
	if x != nil {
		return x.LeftDelim
	}
	return ""
}

func (x *LangMessage) GetRightDelim() string {
	if x != nil {
		return x.RightDelim
	}
	return ""
}

func (x *LangMessage) GetZero() string {
	if x != nil {
		return x.Zero
	}
	return ""
}

func (x *LangMessage) GetOne() string {
	if x != nil {
		return x.One
	}
	return ""
}

func (x *LangMessage) GetTwo() string {
	if x != nil {
		return x.Two
	}
	return ""
}

func (x *LangMessage) GetFew() string {
	if x != nil {
		return x.Few
	}
	return ""
}

func (x *LangMessage) GetMany() string {
	if x != nil {
		return x.Many
	}
	return ""
}

func (x *LangMessage) GetOther() string {
	if x != nil {
		return x.Other
	}
	return ""
}

type DictData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          map[string]string      `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DictData) Reset() {
	*x = DictData{}
	mi := &file_config_config_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictData) ProtoMessage() {}

func (x *DictData) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictData.ProtoReflect.Descriptor instead.
func (*DictData) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{19}
}

func (x *DictData) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

// 工作流配置
type Workflow struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	HostPort                   string                 `protobuf:"bytes,1,opt,name=hostPort,proto3" json:"hostPort,omitempty"`
	Namespace                  string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Identity                   string                 `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	DisableErrorCodeMetricTags bool                   `protobuf:"varint,4,opt,name=disableErrorCodeMetricTags,proto3" json:"disableErrorCodeMetricTags,omitempty"`
	Workers                    map[string]*Worker     `protobuf:"bytes,5,rep,name=workers,proto3" json:"workers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	mi := &file_config_config_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{20}
}

func (x *Workflow) GetHostPort() string {
	if x != nil {
		return x.HostPort
	}
	return ""
}

func (x *Workflow) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Workflow) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *Workflow) GetDisableErrorCodeMetricTags() bool {
	if x != nil {
		return x.DisableErrorCodeMetricTags
	}
	return false
}

func (x *Workflow) GetWorkers() map[string]*Worker {
	if x != nil {
		return x.Workers
	}
	return nil
}

type Worker struct {
	state                                   protoimpl.MessageState `protogen:"open.v1"`
	MaxConcurrentActivityExecutionSize      int32                  `protobuf:"varint,1,opt,name=maxConcurrentActivityExecutionSize,proto3" json:"maxConcurrentActivityExecutionSize,omitempty"`
	WorkerActivitiesPerSecond               float32                `protobuf:"fixed32,2,opt,name=workerActivitiesPerSecond,proto3" json:"workerActivitiesPerSecond,omitempty"`
	MaxConcurrentLocalActivityExecutionSize int32                  `protobuf:"varint,3,opt,name=maxConcurrentLocalActivityExecutionSize,proto3" json:"maxConcurrentLocalActivityExecutionSize,omitempty"`
	WorkerLocalActivitiesPerSecond          float32                `protobuf:"fixed32,4,opt,name=workerLocalActivitiesPerSecond,proto3" json:"workerLocalActivitiesPerSecond,omitempty"`
	TaskQueueActivitiesPerSecond            float32                `protobuf:"fixed32,5,opt,name=taskQueueActivitiesPerSecond,proto3" json:"taskQueueActivitiesPerSecond,omitempty"`
	MaxConcurrentActivityTaskPollers        int32                  `protobuf:"varint,6,opt,name=maxConcurrentActivityTaskPollers,proto3" json:"maxConcurrentActivityTaskPollers,omitempty"`
	MaxConcurrentWorkflowTaskExecutionSize  int32                  `protobuf:"varint,7,opt,name=maxConcurrentWorkflowTaskExecutionSize,proto3" json:"maxConcurrentWorkflowTaskExecutionSize,omitempty"`
	MaxConcurrentWorkflowTaskPollers        int32                  `protobuf:"varint,8,opt,name=maxConcurrentWorkflowTaskPollers,proto3" json:"maxConcurrentWorkflowTaskPollers,omitempty"`
	EnableLoggingInReplay                   bool                   `protobuf:"varint,9,opt,name=enableLoggingInReplay,proto3" json:"enableLoggingInReplay,omitempty"`
	// 单位毫秒
	StickyScheduleToStartTimeout int32 `protobuf:"varint,10,opt,name=stickyScheduleToStartTimeout,proto3" json:"stickyScheduleToStartTimeout,omitempty"`
	// 单位毫秒
	WorkerStopTimeout                 int32  `protobuf:"varint,11,opt,name=workerStopTimeout,proto3" json:"workerStopTimeout,omitempty"`
	EnableSessionWorker               bool   `protobuf:"varint,12,opt,name=enableSessionWorker,proto3" json:"enableSessionWorker,omitempty"`
	MaxConcurrentSessionExecutionSize int32  `protobuf:"varint,13,opt,name=maxConcurrentSessionExecutionSize,proto3" json:"maxConcurrentSessionExecutionSize,omitempty"`
	DisableWorkflowWorker             bool   `protobuf:"varint,14,opt,name=disableWorkflowWorker,proto3" json:"disableWorkflowWorker,omitempty"`
	LocalActivityWorkerOnly           bool   `protobuf:"varint,15,opt,name=localActivityWorkerOnly,proto3" json:"localActivityWorkerOnly,omitempty"`
	Identity                          string `protobuf:"bytes,16,opt,name=identity,proto3" json:"identity,omitempty"`
	// 单位毫秒
	DeadlockDetectionTimeout int32 `protobuf:"varint,17,opt,name=deadlockDetectionTimeout,proto3" json:"deadlockDetectionTimeout,omitempty"`
	// 单位毫秒
	MaxHeartbeatThrottleInterval int32 `protobuf:"varint,18,opt,name=maxHeartbeatThrottleInterval,proto3" json:"maxHeartbeatThrottleInterval,omitempty"`
	// 单位毫秒
	DefaultHeartbeatThrottleInterval        int32  `protobuf:"varint,19,opt,name=defaultHeartbeatThrottleInterval,proto3" json:"defaultHeartbeatThrottleInterval,omitempty"`
	DisableEagerActivities                  bool   `protobuf:"varint,20,opt,name=disableEagerActivities,proto3" json:"disableEagerActivities,omitempty"`
	MaxConcurrentEagerActivityExecutionSize int32  `protobuf:"varint,21,opt,name=maxConcurrentEagerActivityExecutionSize,proto3" json:"maxConcurrentEagerActivityExecutionSize,omitempty"`
	DisableRegistrationAliasing             bool   `protobuf:"varint,22,opt,name=disableRegistrationAliasing,proto3" json:"disableRegistrationAliasing,omitempty"`
	BuildID                                 string `protobuf:"bytes,23,opt,name=buildID,proto3" json:"buildID,omitempty"`
	UseBuildIDForVersioning                 bool   `protobuf:"varint,24,opt,name=useBuildIDForVersioning,proto3" json:"useBuildIDForVersioning,omitempty"`
	unknownFields                           protoimpl.UnknownFields
	sizeCache                               protoimpl.SizeCache
}

func (x *Worker) Reset() {
	*x = Worker{}
	mi := &file_config_config_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{21}
}

func (x *Worker) GetMaxConcurrentActivityExecutionSize() int32 {
	if x != nil {
		return x.MaxConcurrentActivityExecutionSize
	}
	return 0
}

func (x *Worker) GetWorkerActivitiesPerSecond() float32 {
	if x != nil {
		return x.WorkerActivitiesPerSecond
	}
	return 0
}

func (x *Worker) GetMaxConcurrentLocalActivityExecutionSize() int32 {
	if x != nil {
		return x.MaxConcurrentLocalActivityExecutionSize
	}
	return 0
}

func (x *Worker) GetWorkerLocalActivitiesPerSecond() float32 {
	if x != nil {
		return x.WorkerLocalActivitiesPerSecond
	}
	return 0
}

func (x *Worker) GetTaskQueueActivitiesPerSecond() float32 {
	if x != nil {
		return x.TaskQueueActivitiesPerSecond
	}
	return 0
}

func (x *Worker) GetMaxConcurrentActivityTaskPollers() int32 {
	if x != nil {
		return x.MaxConcurrentActivityTaskPollers
	}
	return 0
}

func (x *Worker) GetMaxConcurrentWorkflowTaskExecutionSize() int32 {
	if x != nil {
		return x.MaxConcurrentWorkflowTaskExecutionSize
	}
	return 0
}

func (x *Worker) GetMaxConcurrentWorkflowTaskPollers() int32 {
	if x != nil {
		return x.MaxConcurrentWorkflowTaskPollers
	}
	return 0
}

func (x *Worker) GetEnableLoggingInReplay() bool {
	if x != nil {
		return x.EnableLoggingInReplay
	}
	return false
}

func (x *Worker) GetStickyScheduleToStartTimeout() int32 {
	if x != nil {
		return x.StickyScheduleToStartTimeout
	}
	return 0
}

func (x *Worker) GetWorkerStopTimeout() int32 {
	if x != nil {
		return x.WorkerStopTimeout
	}
	return 0
}

func (x *Worker) GetEnableSessionWorker() bool {
	if x != nil {
		return x.EnableSessionWorker
	}
	return false
}

func (x *Worker) GetMaxConcurrentSessionExecutionSize() int32 {
	if x != nil {
		return x.MaxConcurrentSessionExecutionSize
	}
	return 0
}

func (x *Worker) GetDisableWorkflowWorker() bool {
	if x != nil {
		return x.DisableWorkflowWorker
	}
	return false
}

func (x *Worker) GetLocalActivityWorkerOnly() bool {
	if x != nil {
		return x.LocalActivityWorkerOnly
	}
	return false
}

func (x *Worker) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *Worker) GetDeadlockDetectionTimeout() int32 {
	if x != nil {
		return x.DeadlockDetectionTimeout
	}
	return 0
}

func (x *Worker) GetMaxHeartbeatThrottleInterval() int32 {
	if x != nil {
		return x.MaxHeartbeatThrottleInterval
	}
	return 0
}

func (x *Worker) GetDefaultHeartbeatThrottleInterval() int32 {
	if x != nil {
		return x.DefaultHeartbeatThrottleInterval
	}
	return 0
}

func (x *Worker) GetDisableEagerActivities() bool {
	if x != nil {
		return x.DisableEagerActivities
	}
	return false
}

func (x *Worker) GetMaxConcurrentEagerActivityExecutionSize() int32 {
	if x != nil {
		return x.MaxConcurrentEagerActivityExecutionSize
	}
	return 0
}

func (x *Worker) GetDisableRegistrationAliasing() bool {
	if x != nil {
		return x.DisableRegistrationAliasing
	}
	return false
}

func (x *Worker) GetBuildID() string {
	if x != nil {
		return x.BuildID
	}
	return ""
}

func (x *Worker) GetUseBuildIDForVersioning() bool {
	if x != nil {
		return x.UseBuildIDForVersioning
	}
	return false
}

// 认证的配置
type Auth struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 类型 iam 或者 用户
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// 认证服务地址
	Addr          string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Auth) Reset() {
	*x = Auth{}
	mi := &file_config_config_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth) ProtoMessage() {}

func (x *Auth) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth.ProtoReflect.Descriptor instead.
func (*Auth) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{22}
}

func (x *Auth) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Auth) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type Consumer_DLQ struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	MaxDeliveries    uint32                 `protobuf:"varint,1,opt,name=maxDeliveries,proto3" json:"maxDeliveries,omitempty"`
	DeadLetterTopic  string                 `protobuf:"bytes,2,opt,name=deadLetterTopic,proto3" json:"deadLetterTopic,omitempty"`
	RetryLetterTopic string                 `protobuf:"bytes,3,opt,name=retryLetterTopic,proto3" json:"retryLetterTopic,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Consumer_DLQ) Reset() {
	*x = Consumer_DLQ{}
	mi := &file_config_config_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Consumer_DLQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consumer_DLQ) ProtoMessage() {}

func (x *Consumer_DLQ) ProtoReflect() protoreflect.Message {
	mi := &file_config_config_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consumer_DLQ.ProtoReflect.Descriptor instead.
func (*Consumer_DLQ) Descriptor() ([]byte, []int) {
	return file_config_config_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Consumer_DLQ) GetMaxDeliveries() uint32 {
	if x != nil {
		return x.MaxDeliveries
	}
	return 0
}

func (x *Consumer_DLQ) GetDeadLetterTopic() string {
	if x != nil {
		return x.DeadLetterTopic
	}
	return ""
}

func (x *Consumer_DLQ) GetRetryLetterTopic() string {
	if x != nil {
		return x.RetryLetterTopic
	}
	return ""
}

var File_config_config_proto protoreflect.FileDescriptor

const file_config_config_proto_rawDesc = "" +
	"\n" +
	"\x13config/config.proto\x12\ryimoko.config\x1a\x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/protobuf/struct.proto\"\xf7\a\n" +
	"\x06Config\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12-\n" +
	"\x06server\x18\x02 \x01(\v2\x15.yimoko.config.ServerR\x06server\x12'\n" +
	"\x04data\x18\x03 \x01(\v2\x13.yimoko.config.DataR\x04data\x12*\n" +
	"\x05trace\x18\x04 \x01(\v2\x14.yimoko.config.TraceR\x05trace\x120\n" +
	"\ametrics\x18\x0f \x01(\v2\x16.yimoko.config.MetricsR\ametrics\x12!\n" +
	"\x02mq\x18\x05 \x01(\v2\x11.yimoko.config.MQR\x02mq\x12-\n" +
	"\x06upload\x18\x06 \x01(\v2\x15.yimoko.config.UploadR\x06upload\x12?\n" +
	"\bservices\x18\a \x03(\v2#.yimoko.config.Config.ServicesEntryR\bservices\x12 \n" +
	"\vcallbackURL\x18\b \x01(\tR\vcallbackURL\x12-\n" +
	"\x06logger\x18\t \x01(\v2\x15.yimoko.config.LoggerR\x06logger\x12B\n" +
	"\tlanguages\x18\n" +
	" \x03(\v2$.yimoko.config.Config.LanguagesEntryR\tlanguages\x12H\n" +
	"\vcommonLangs\x18\v \x03(\v2&.yimoko.config.Config.CommonLangsEntryR\vcommonLangs\x123\n" +
	"\bworkflow\x18\f \x01(\v2\x17.yimoko.config.WorkflowR\bworkflow\x123\n" +
	"\n" +
	"manageAuth\x18\r \x01(\v2\x13.yimoko.config.AuthR\n" +
	"manageAuth\x123\n" +
	"\n" +
	"portalAuth\x18\x0e \x01(\v2\x13.yimoko.config.AuthR\n" +
	"portalAuth\x12-\n" +
	"\x05extra\x18\x14 \x01(\v2\x17.google.protobuf.StructR\x05extra\x1a;\n" +
	"\rServicesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aQ\n" +
	"\x0eLanguagesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.yimoko.config.LangR\x05value:\x028\x01\x1aS\n" +
	"\x10CommonLangsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.yimoko.config.LangR\x05value:\x028\x01\"\x81\x02\n" +
	"\x06Server\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x12\x14\n" +
	"\x05appid\x18\x04 \x01(\tR\x05appid\x12-\n" +
	"\x04grpc\x18\x05 \x01(\v2\x19.yimoko.config.ServerItemR\x04grpc\x129\n" +
	"\n" +
	"httpManage\x18\x06 \x01(\v2\x19.yimoko.config.ServerItemR\n" +
	"httpManage\x129\n" +
	"\n" +
	"httpPortal\x18\a \x01(\v2\x19.yimoko.config.ServerItemR\n" +
	"httpPortal\"\xb9\x03\n" +
	"\n" +
	"ServerItem\x12\x18\n" +
	"\anetwork\x18\x01 \x01(\tR\anetwork\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x123\n" +
	"\atimeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12\x14\n" +
	"\x05isLog\x18\x04 \x01(\bR\x05isLog\x12\x18\n" +
	"\aisTrace\x18\x05 \x01(\bR\aisTrace\x12\x1c\n" +
	"\tisMetrics\x18\r \x01(\bR\tisMetrics\x12\x1e\n" +
	"\n" +
	"authServer\x18\x06 \x01(\tR\n" +
	"authServer\x12\"\n" +
	"\faccessServer\x18\a \x01(\tR\faccessServer\x12$\n" +
	"\rauthWhiteList\x18\b \x03(\tR\rauthWhiteList\x12(\n" +
	"\x0faccessWhiteList\x18\t \x03(\tR\x0faccessWhiteList\x12\"\n" +
	"\faccessPrefix\x18\n" +
	" \x01(\tR\faccessPrefix\x12 \n" +
	"\vtracePrefix\x18\v \x01(\tR\vtracePrefix\x12 \n" +
	"\vtraceSuffix\x18\f \x01(\tR\vtraceSuffix\"\xfa\x02\n" +
	"\x04Data\x123\n" +
	"\bdatabase\x18\x01 \x01(\v2\x17.yimoko.config.DatabaseR\bdatabase\x12*\n" +
	"\x05redis\x18\x02 \x01(\v2\x14.yimoko.config.RedisR\x05redis\x12*\n" +
	"\x05cache\x18\x03 \x01(\v2\x14.yimoko.config.CacheR\x05cache\x12-\n" +
	"\x06search\x18\x04 \x01(\v2\x15.yimoko.config.SearchR\x06search\x12\x16\n" +
	"\x06secret\x18\x05 \x01(\tR\x06secret\x12:\n" +
	"\asecrets\x18\x06 \x03(\v2 .yimoko.config.Data.SecretsEntryR\asecrets\x12&\n" +
	"\x0enoCreateSchema\x18\a \x01(\bR\x0enoCreateSchema\x1a:\n" +
	"\fSecretsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"T\n" +
	"\bDatabase\x12\x16\n" +
	"\x06driver\x18\x01 \x01(\tR\x06driver\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x12\x18\n" +
	"\aisTrace\x18\x03 \x01(\bR\aisTrace\"\xcf\x02\n" +
	"\x05Redis\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\tR\x04addr\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\x12\x0e\n" +
	"\x02db\x18\x03 \x01(\x05R\x02db\x12<\n" +
	"\fdial_timeout\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\vdialTimeout\x12<\n" +
	"\fread_timeout\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\vreadTimeout\x12>\n" +
	"\rwrite_timeout\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\fwriteTimeout\x12\x18\n" +
	"\aisTrace\x18\a \x01(\bR\aisTrace\x12\x1a\n" +
	"\bisSingle\x18\b \x01(\bR\bisSingle\x12\x14\n" +
	"\x05addrs\x18\t \x03(\tR\x05addrs\"W\n" +
	"\x05Cache\x12\x16\n" +
	"\x06prefix\x18\x01 \x01(\tR\x06prefix\x12\x1e\n" +
	"\n" +
	"expiration\x18\x02 \x01(\x05R\n" +
	"expiration\x12\x16\n" +
	"\x06driver\x18\x03 \x01(\tR\x06driver\"b\n" +
	"\x06Search\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\tR\x04addr\x12\x14\n" +
	"\x05addrs\x18\x02 \x03(\tR\x05addrs\x12\x12\n" +
	"\x04user\x18\x03 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\"\xe1\x02\n" +
	"\x02MQ\x12-\n" +
	"\x06pulsar\x18\x01 \x01(\v2\x15.yimoko.config.PulsarR\x06pulsar\x12>\n" +
	"\tconsumers\x18\x02 \x03(\v2 .yimoko.config.MQ.ConsumersEntryR\tconsumers\x12>\n" +
	"\tproducers\x18\x03 \x03(\v2 .yimoko.config.MQ.ProducersEntryR\tproducers\x1aU\n" +
	"\x0eConsumersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.yimoko.config.ConsumerR\x05value:\x028\x01\x1aU\n" +
	"\x0eProducersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.yimoko.config.ProducerR\x05value:\x028\x01\"\x9c\x01\n" +
	"\x06Pulsar\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12&\n" +
	"\x0eauthentication\x18\x02 \x01(\tR\x0eauthentication\x12*\n" +
	"\x10operationTimeout\x18\x03 \x01(\x05R\x10operationTimeout\x12,\n" +
	"\x11connectionTimeout\x18\x04 \x01(\x05R\x11connectionTimeout\"\xf3\x02\n" +
	"\bConsumer\x12\x1e\n" +
	"\n" +
	"channelNum\x18\x01 \x01(\x05R\n" +
	"channelNum\x12&\n" +
	"\x0ereconsumeDelay\x18\x02 \x01(\x03R\x0ereconsumeDelay\x12\x14\n" +
	"\x05topic\x18\x03 \x01(\tR\x05topic\x12\x16\n" +
	"\x06topics\x18\x04 \x03(\tR\x06topics\x12*\n" +
	"\x10subscriptionName\x18\x05 \x01(\tR\x10subscriptionName\x12\x12\n" +
	"\x04type\x18\x06 \x01(\tR\x04type\x12-\n" +
	"\x03dlq\x18\a \x01(\v2\x1b.yimoko.config.Consumer.DLQR\x03dlq\x1a\x81\x01\n" +
	"\x03DLQ\x12$\n" +
	"\rmaxDeliveries\x18\x01 \x01(\rR\rmaxDeliveries\x12(\n" +
	"\x0fdeadLetterTopic\x18\x02 \x01(\tR\x0fdeadLetterTopic\x12*\n" +
	"\x10retryLetterTopic\x18\x03 \x01(\tR\x10retryLetterTopic\"4\n" +
	"\bProducer\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"\xba\x04\n" +
	"\x06Logger\x12\x1a\n" +
	"\bprovider\x18\x01 \x01(\tR\bprovider\x12\x18\n" +
	"\atopicID\x18\x02 \x01(\tR\atopicID\x12\x1c\n" +
	"\taccessKey\x18\x03 \x01(\tR\taccessKey\x12\"\n" +
	"\faccessSecret\x18\x04 \x01(\tR\faccessSecret\x12\x1a\n" +
	"\bendpoint\x18\x05 \x01(\tR\bendpoint\x12\x14\n" +
	"\x05token\x18\x06 \x01(\tR\x05token\x12\x1a\n" +
	"\busername\x18\a \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\b \x01(\tR\bpassword\x12\x18\n" +
	"\aalsoStd\x18\t \x01(\bR\aalsoStd\x12 \n" +
	"\vfilterLevel\x18\n" +
	" \x01(\tR\vfilterLevel\x12\x1e\n" +
	"\n" +
	"filterKeys\x18\v \x03(\tR\n" +
	"filterKeys\x12\"\n" +
	"\ffilterValues\x18\f \x03(\tR\ffilterValues\x12&\n" +
	"\x0esensitiveRegex\x18\r \x03(\tR\x0esensitiveRegex\x12<\n" +
	"\aheaders\x18\x0e \x03(\v2\".yimoko.config.Logger.HeadersEntryR\aheaders\x12\x1f\n" +
	"\binsecure\x18\x0f \x01(\bH\x00R\binsecure\x88\x01\x01\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\v\n" +
	"\t_insecure\"\xc8\x02\n" +
	"\x05Trace\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\"\n" +
	"\fsamplingRate\x18\x02 \x01(\x02R\fsamplingRate\x12\x18\n" +
	"\aservice\x18\x03 \x01(\tR\aservice\x12\x10\n" +
	"\x03env\x18\x04 \x01(\tR\x03env\x12,\n" +
	"\x04auth\x18\x05 \x01(\v2\x18.yimoko.config.TraceAuthR\x04auth\x12\x1f\n" +
	"\binsecure\x18\x06 \x01(\bH\x00R\binsecure\x88\x01\x01\x12;\n" +
	"\aheaders\x18\a \x03(\v2!.yimoko.config.Trace.HeadersEntryR\aheaders\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\v\n" +
	"\t_insecure\"Q\n" +
	"\tTraceAuth\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1a\n" +
	"\bpassword\x18\x03 \x01(\tR\bpassword\"\xe3\x03\n" +
	"\aMetrics\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x18\n" +
	"\aservice\x18\x02 \x01(\tR\aservice\x12\x10\n" +
	"\x03env\x18\x03 \x01(\tR\x03env\x12\x1c\n" +
	"\tnamespace\x18\x04 \x01(\tR\tnamespace\x12\x1c\n" +
	"\tsubsystem\x18\x05 \x01(\tR\tsubsystem\x12:\n" +
	"\x06labels\x18\x06 \x03(\v2\".yimoko.config.Metrics.LabelsEntryR\x06labels\x12\x1f\n" +
	"\binsecure\x18\a \x01(\bH\x00R\binsecure\x88\x01\x01\x12=\n" +
	"\aheaders\x18\b \x03(\v2#.yimoko.config.Metrics.HeadersEntryR\aheaders\x12\x18\n" +
	"\atimeout\x18\t \x01(\x05R\atimeout\x12\x1a\n" +
	"\binterval\x18\n" +
	" \x01(\x05R\binterval\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\v\n" +
	"\t_insecure\"f\n" +
	"\x06Upload\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x1a\n" +
	"\bsecretID\x18\x02 \x01(\tR\bsecretID\x12\x1c\n" +
	"\tsecretKey\x18\x03 \x01(\tR\tsecretKey\x12\x10\n" +
	"\x03cdn\x18\x04 \x01(\tR\x03cdn\"\xc3\x01\n" +
	"\x04Lang\x126\n" +
	"\bmessages\x18\x01 \x03(\v2\x1a.yimoko.config.LangMessageR\bmessages\x121\n" +
	"\x04dict\x18\x02 \x03(\v2\x1d.yimoko.config.Lang.DictEntryR\x04dict\x1aP\n" +
	"\tDictEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.yimoko.config.DictDataR\x05value:\x028\x01\"\x85\x02\n" +
	"\vLangMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04hash\x18\x02 \x01(\tR\x04hash\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1c\n" +
	"\tleftDelim\x18\x04 \x01(\tR\tleftDelim\x12\x1e\n" +
	"\n" +
	"rightDelim\x18\x05 \x01(\tR\n" +
	"rightDelim\x12\x12\n" +
	"\x04zero\x18\x06 \x01(\tR\x04zero\x12\x10\n" +
	"\x03one\x18\a \x01(\tR\x03one\x12\x10\n" +
	"\x03two\x18\b \x01(\tR\x03two\x12\x10\n" +
	"\x03few\x18\t \x01(\tR\x03few\x12\x12\n" +
	"\x04many\x18\n" +
	" \x01(\tR\x04many\x12\x14\n" +
	"\x05other\x18\v \x01(\tR\x05other\"z\n" +
	"\bDictData\x125\n" +
	"\x04data\x18\x01 \x03(\v2!.yimoko.config.DictData.DataEntryR\x04data\x1a7\n" +
	"\tDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb3\x02\n" +
	"\bWorkflow\x12\x1a\n" +
	"\bhostPort\x18\x01 \x01(\tR\bhostPort\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x1a\n" +
	"\bidentity\x18\x03 \x01(\tR\bidentity\x12>\n" +
	"\x1adisableErrorCodeMetricTags\x18\x04 \x01(\bR\x1adisableErrorCodeMetricTags\x12>\n" +
	"\aworkers\x18\x05 \x03(\v2$.yimoko.config.Workflow.WorkersEntryR\aworkers\x1aQ\n" +
	"\fWorkersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12+\n" +
	"\x05value\x18\x02 \x01(\v2\x15.yimoko.config.WorkerR\x05value:\x028\x01\"\x94\f\n" +
	"\x06Worker\x12N\n" +
	"\"maxConcurrentActivityExecutionSize\x18\x01 \x01(\x05R\"maxConcurrentActivityExecutionSize\x12<\n" +
	"\x19workerActivitiesPerSecond\x18\x02 \x01(\x02R\x19workerActivitiesPerSecond\x12X\n" +
	"'maxConcurrentLocalActivityExecutionSize\x18\x03 \x01(\x05R'maxConcurrentLocalActivityExecutionSize\x12F\n" +
	"\x1eworkerLocalActivitiesPerSecond\x18\x04 \x01(\x02R\x1eworkerLocalActivitiesPerSecond\x12B\n" +
	"\x1ctaskQueueActivitiesPerSecond\x18\x05 \x01(\x02R\x1ctaskQueueActivitiesPerSecond\x12J\n" +
	" maxConcurrentActivityTaskPollers\x18\x06 \x01(\x05R maxConcurrentActivityTaskPollers\x12V\n" +
	"&maxConcurrentWorkflowTaskExecutionSize\x18\a \x01(\x05R&maxConcurrentWorkflowTaskExecutionSize\x12J\n" +
	" maxConcurrentWorkflowTaskPollers\x18\b \x01(\x05R maxConcurrentWorkflowTaskPollers\x124\n" +
	"\x15enableLoggingInReplay\x18\t \x01(\bR\x15enableLoggingInReplay\x12B\n" +
	"\x1cstickyScheduleToStartTimeout\x18\n" +
	" \x01(\x05R\x1cstickyScheduleToStartTimeout\x12,\n" +
	"\x11workerStopTimeout\x18\v \x01(\x05R\x11workerStopTimeout\x120\n" +
	"\x13enableSessionWorker\x18\f \x01(\bR\x13enableSessionWorker\x12L\n" +
	"!maxConcurrentSessionExecutionSize\x18\r \x01(\x05R!maxConcurrentSessionExecutionSize\x124\n" +
	"\x15disableWorkflowWorker\x18\x0e \x01(\bR\x15disableWorkflowWorker\x128\n" +
	"\x17localActivityWorkerOnly\x18\x0f \x01(\bR\x17localActivityWorkerOnly\x12\x1a\n" +
	"\bidentity\x18\x10 \x01(\tR\bidentity\x12:\n" +
	"\x18deadlockDetectionTimeout\x18\x11 \x01(\x05R\x18deadlockDetectionTimeout\x12B\n" +
	"\x1cmaxHeartbeatThrottleInterval\x18\x12 \x01(\x05R\x1cmaxHeartbeatThrottleInterval\x12J\n" +
	" defaultHeartbeatThrottleInterval\x18\x13 \x01(\x05R defaultHeartbeatThrottleInterval\x126\n" +
	"\x16disableEagerActivities\x18\x14 \x01(\bR\x16disableEagerActivities\x12X\n" +
	"'maxConcurrentEagerActivityExecutionSize\x18\x15 \x01(\x05R'maxConcurrentEagerActivityExecutionSize\x12@\n" +
	"\x1bdisableRegistrationAliasing\x18\x16 \x01(\bR\x1bdisableRegistrationAliasing\x12\x18\n" +
	"\abuildID\x18\x17 \x01(\tR\abuildID\x128\n" +
	"\x17useBuildIDForVersioning\x18\x18 \x01(\bR\x17useBuildIDForVersioning\".\n" +
	"\x04Auth\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addrBO\n" +
	"\x18com.github.yimoko.configP\x01Z\"github.com/yimoka/go/config;config\xa2\x02\fYimokoConfigb\x06proto3"

var (
	file_config_config_proto_rawDescOnce sync.Once
	file_config_config_proto_rawDescData []byte
)

func file_config_config_proto_rawDescGZIP() []byte {
	file_config_config_proto_rawDescOnce.Do(func() {
		file_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_config_config_proto_rawDesc), len(file_config_config_proto_rawDesc)))
	})
	return file_config_config_proto_rawDescData
}

var file_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_config_config_proto_goTypes = []any{
	(*Config)(nil),              // 0: yimoko.config.Config
	(*Server)(nil),              // 1: yimoko.config.Server
	(*ServerItem)(nil),          // 2: yimoko.config.ServerItem
	(*Data)(nil),                // 3: yimoko.config.Data
	(*Database)(nil),            // 4: yimoko.config.Database
	(*Redis)(nil),               // 5: yimoko.config.Redis
	(*Cache)(nil),               // 6: yimoko.config.Cache
	(*Search)(nil),              // 7: yimoko.config.Search
	(*MQ)(nil),                  // 8: yimoko.config.MQ
	(*Pulsar)(nil),              // 9: yimoko.config.Pulsar
	(*Consumer)(nil),            // 10: yimoko.config.Consumer
	(*Producer)(nil),            // 11: yimoko.config.Producer
	(*Logger)(nil),              // 12: yimoko.config.Logger
	(*Trace)(nil),               // 13: yimoko.config.Trace
	(*TraceAuth)(nil),           // 14: yimoko.config.TraceAuth
	(*Metrics)(nil),             // 15: yimoko.config.Metrics
	(*Upload)(nil),              // 16: yimoko.config.Upload
	(*Lang)(nil),                // 17: yimoko.config.Lang
	(*LangMessage)(nil),         // 18: yimoko.config.LangMessage
	(*DictData)(nil),            // 19: yimoko.config.DictData
	(*Workflow)(nil),            // 20: yimoko.config.Workflow
	(*Worker)(nil),              // 21: yimoko.config.Worker
	(*Auth)(nil),                // 22: yimoko.config.Auth
	nil,                         // 23: yimoko.config.Config.ServicesEntry
	nil,                         // 24: yimoko.config.Config.LanguagesEntry
	nil,                         // 25: yimoko.config.Config.CommonLangsEntry
	nil,                         // 26: yimoko.config.Data.SecretsEntry
	nil,                         // 27: yimoko.config.MQ.ConsumersEntry
	nil,                         // 28: yimoko.config.MQ.ProducersEntry
	(*Consumer_DLQ)(nil),        // 29: yimoko.config.Consumer.DLQ
	nil,                         // 30: yimoko.config.Logger.HeadersEntry
	nil,                         // 31: yimoko.config.Trace.HeadersEntry
	nil,                         // 32: yimoko.config.Metrics.LabelsEntry
	nil,                         // 33: yimoko.config.Metrics.HeadersEntry
	nil,                         // 34: yimoko.config.Lang.DictEntry
	nil,                         // 35: yimoko.config.DictData.DataEntry
	nil,                         // 36: yimoko.config.Workflow.WorkersEntry
	(*structpb.Struct)(nil),     // 37: google.protobuf.Struct
	(*durationpb.Duration)(nil), // 38: google.protobuf.Duration
}
var file_config_config_proto_depIdxs = []int32{
	1,  // 0: yimoko.config.Config.server:type_name -> yimoko.config.Server
	3,  // 1: yimoko.config.Config.data:type_name -> yimoko.config.Data
	13, // 2: yimoko.config.Config.trace:type_name -> yimoko.config.Trace
	15, // 3: yimoko.config.Config.metrics:type_name -> yimoko.config.Metrics
	8,  // 4: yimoko.config.Config.mq:type_name -> yimoko.config.MQ
	16, // 5: yimoko.config.Config.upload:type_name -> yimoko.config.Upload
	23, // 6: yimoko.config.Config.services:type_name -> yimoko.config.Config.ServicesEntry
	12, // 7: yimoko.config.Config.logger:type_name -> yimoko.config.Logger
	24, // 8: yimoko.config.Config.languages:type_name -> yimoko.config.Config.LanguagesEntry
	25, // 9: yimoko.config.Config.commonLangs:type_name -> yimoko.config.Config.CommonLangsEntry
	20, // 10: yimoko.config.Config.workflow:type_name -> yimoko.config.Workflow
	22, // 11: yimoko.config.Config.manageAuth:type_name -> yimoko.config.Auth
	22, // 12: yimoko.config.Config.portalAuth:type_name -> yimoko.config.Auth
	37, // 13: yimoko.config.Config.extra:type_name -> google.protobuf.Struct
	2,  // 14: yimoko.config.Server.grpc:type_name -> yimoko.config.ServerItem
	2,  // 15: yimoko.config.Server.httpManage:type_name -> yimoko.config.ServerItem
	2,  // 16: yimoko.config.Server.httpPortal:type_name -> yimoko.config.ServerItem
	38, // 17: yimoko.config.ServerItem.timeout:type_name -> google.protobuf.Duration
	4,  // 18: yimoko.config.Data.database:type_name -> yimoko.config.Database
	5,  // 19: yimoko.config.Data.redis:type_name -> yimoko.config.Redis
	6,  // 20: yimoko.config.Data.cache:type_name -> yimoko.config.Cache
	7,  // 21: yimoko.config.Data.search:type_name -> yimoko.config.Search
	26, // 22: yimoko.config.Data.secrets:type_name -> yimoko.config.Data.SecretsEntry
	38, // 23: yimoko.config.Redis.dial_timeout:type_name -> google.protobuf.Duration
	38, // 24: yimoko.config.Redis.read_timeout:type_name -> google.protobuf.Duration
	38, // 25: yimoko.config.Redis.write_timeout:type_name -> google.protobuf.Duration
	9,  // 26: yimoko.config.MQ.pulsar:type_name -> yimoko.config.Pulsar
	27, // 27: yimoko.config.MQ.consumers:type_name -> yimoko.config.MQ.ConsumersEntry
	28, // 28: yimoko.config.MQ.producers:type_name -> yimoko.config.MQ.ProducersEntry
	29, // 29: yimoko.config.Consumer.dlq:type_name -> yimoko.config.Consumer.DLQ
	30, // 30: yimoko.config.Logger.headers:type_name -> yimoko.config.Logger.HeadersEntry
	14, // 31: yimoko.config.Trace.auth:type_name -> yimoko.config.TraceAuth
	31, // 32: yimoko.config.Trace.headers:type_name -> yimoko.config.Trace.HeadersEntry
	32, // 33: yimoko.config.Metrics.labels:type_name -> yimoko.config.Metrics.LabelsEntry
	33, // 34: yimoko.config.Metrics.headers:type_name -> yimoko.config.Metrics.HeadersEntry
	18, // 35: yimoko.config.Lang.messages:type_name -> yimoko.config.LangMessage
	34, // 36: yimoko.config.Lang.dict:type_name -> yimoko.config.Lang.DictEntry
	35, // 37: yimoko.config.DictData.data:type_name -> yimoko.config.DictData.DataEntry
	36, // 38: yimoko.config.Workflow.workers:type_name -> yimoko.config.Workflow.WorkersEntry
	17, // 39: yimoko.config.Config.LanguagesEntry.value:type_name -> yimoko.config.Lang
	17, // 40: yimoko.config.Config.CommonLangsEntry.value:type_name -> yimoko.config.Lang
	10, // 41: yimoko.config.MQ.ConsumersEntry.value:type_name -> yimoko.config.Consumer
	11, // 42: yimoko.config.MQ.ProducersEntry.value:type_name -> yimoko.config.Producer
	19, // 43: yimoko.config.Lang.DictEntry.value:type_name -> yimoko.config.DictData
	21, // 44: yimoko.config.Workflow.WorkersEntry.value:type_name -> yimoko.config.Worker
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_config_config_proto_init() }
func file_config_config_proto_init() {
	if File_config_config_proto != nil {
		return
	}
	file_config_config_proto_msgTypes[12].OneofWrappers = []any{}
	file_config_config_proto_msgTypes[13].OneofWrappers = []any{}
	file_config_config_proto_msgTypes[15].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_config_proto_rawDesc), len(file_config_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_config_proto_goTypes,
		DependencyIndexes: file_config_config_proto_depIdxs,
		MessageInfos:      file_config_config_proto_msgTypes,
	}.Build()
	File_config_config_proto = out.File
	file_config_config_proto_goTypes = nil
	file_config_config_proto_depIdxs = nil
}
